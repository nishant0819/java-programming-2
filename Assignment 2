Q1. What do you mean by a Data structure?
Ans: Data structure is a way for storing, organizing, processing and retrieving data. 

Q2. What are some of the applications of DS?
Ans: Arrays, Linked list, Queue, Stack, Graph, Tree are some of the applications of Data Structure.

Q3. What are the advantages of a Linked list over an array?
Ans: Both linked list and array is used for storing linear data but-
> The Size of the list doesn't need to be mentioned at the beginning of the program.
> As the linked list doesn't have a size limit, we can go on adding new nodes (elements) and increasing 
the size of the list to any extent. That is why Insertion and deletion in linked list is easy as compare 
to array.

Q4. Write the syntax in C to create a node in the singly linked list.
Ans: <Below is the code>

struct node {  
int data;  
struct node *next;  
};    
  
//Represent the head and tail of the singly linked list  
struct node *head, *tail = NULL;  
  
//addNode() will add a new node to the list  
void addNode(int data) {  
    //Create a new node  
    struct node *newNode = (struct node*)malloc(sizeof(struct node));  
    newNode->data = data;  
    newNode->next = NULL;  
      
    //Checks if the list is empty  
    if(head == NULL) {  
        //If list is empty, both head and tail will point to new node  
        head = newNode;  
        tail = newNode;  
    }  
    else {  
        //newNode will be added after tail such that tail's next will point to newNode  
        tail->next = newNode;  
        //newNode will become new tail of the list  
        tail = newNode;  
    }  
}  

Q5. What is the use of a doubly-linked list when compared to that of a singly linked list?
Ans: 1. Doubly linked list allows element two way traversal whereas Singly linked list allows traversal of 
elements only in one way.
2. In case od doubly linked list the complexity of insertion and deletion at a known position is O(1) whereas 
in Singly linked list it is O(n).
3. If we need better performance while searching and memory is not a limitation in this case doubly linked 
list is more preferred.

Q6. What is the difference between an Array and Stack?
Ans: The major difference between array and stack is array stores elements of same type whereas stack stores
elements of different type. Also in an array, we have a list of elements and we can access any of them at any 
time. But in a stack, there's no random-access operation; there are only Push, Peek and Pop operations.

Q7. What are the minimum number of Queues needed to implement the priority queue?
Ans: Two is the minimum number of Queues needed to implement the priority queue, the first one for storing 
data and the other one for priorities.

Q8. What are the different types of traversal techniques in a tree?
Ans: There are three types of traversal techniques available for trees-
1.	In-order traversal
2.	Pre-order traversal
3.	Post-order traversal

Q9. Why it is said that searching a node in a binary search tree is efficient than that of a simple binary 
tree?
Ans: While Binary search tree is data structure which uses the concept of binary search. Binary search tree 
has a special quality that every node has at most 2 nodes and left child of every node has less value than node 
and right child has more value than node. By this method it become easy to search a node in a tree.

Q10. What are the applications of Graph DS?
Ans: Graphs are one of the best data structures that we use every day through Google Search, Google Maps, 
GPS, and social media. They are used to represent elements that share connections. Google maps uses graphs 
for building transportation systems, where intersection of two or more roads are considered to be a vertex
and the road connecting two vertices is considered to be an edge, thus their navigation system is based on 
the algorithm to calculate the shortest path between two vertices.

Q11. Can we apply Binary search algorithm to a sorted Linked list?
Ans: Yes, Binary search is possible on the linked list if the list is ordered and you know the count of elements 
in list. But While sorting the list, you can access a single element at a time through a pointer to that node i.e. 
either a previous node or next node. 

Q12. When can you tell that a Memory Leak will occur?
Ans. Memory leak is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in a way that memory which is no 
longer needed is not released. A memory leak may also happen when an object is stored in memory but cannot be accessed by the running code.A memory leak has symptoms 
similar to a number of other problems and generally can only be diagnosed by a programmer with access to the programs source code. 
When we initialize or create memory for the any object by using constructor. On that time we can say that we create thread for memory management. 
On that time thread active in environment. Programmer forget to call destructor for release or free that thread. Than this type of problem is called memory leakage in c++.

Q13. How will you check if a given Binary Tree is a Binary Search Tree or not?
Ans:A Binary Search Tree is a binary tree with the following properties:
1. The left subtree of a particular node will always contain nodes whose keys are less than that node’s key.
2. The right subtree of a particular node will always contain nodes with keys greater than that node’s key.
3. The left and right subtree of a particular node will also, in turn, be binary search trees.

Q14. Which data structure is ideal to perform recursion operation and why?
Ans.  Stack is ideal to perform recursion operation because of its LIFO (Last In First Out) property it remembers 
its ‘caller’ so knows whom to return when the function has to return. Recursion makes use of system stack 
for storing the return addresses of the function calls.

Q15. What are some of the most important applications of a Stack?
Ans: Some of the applications of a Stack are-
1. Stacks can be used for expression evaluation.
2. Stacks can be used for Memory Management.
3. Stacks can be used for Conversion from one form of expression to another.
4. Stacks can be used to check parenthesis matching in an expression.
5. Stack data structures are used in backtracking problems.

Q16. Convert the below given expression to its equivalent Prefix And Postfix notations.
Ans: <NO Expression Available>

Q17. Sorting a stack using a temporary stack
Ans: <Below is the code>

import java.util.*;
public class stackSort {
    public static Stack<Integer> s(Stack<Integer> input) {
        Stack<Integer> tempStack = new Stack<Integer>();
        while(!input.isEmpty()){
            int temp = input.pop();
            while(!tempStack.isEmpty() && tempStack.peek() > temp) {
                input.push(tempStack.pop());
            }
            tempStack.push(temp);
        }
        return tempStack;
    }
    public static void main(String args[]) {
        Stack<Integer> input = new Stack<Integer>();
        input.add(13);
        input.add(78);
        input.add(1);
        input.add(33);
        input.add(22);
        input.add(20);
        Stack<Integer> tempStack = s(input);
        System.out.println("Sorted numbers are:");
        while (!tempStack.empty()) {
            System.out.print(tempStack.pop()+" ");
        }
    }
}

Q18. Program to reverse a queue.
Ans. <Below is the code>

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
class QueueReverse {
    static Queue<Integer> queue;
    static void Print()
    {
        while (!queue.isEmpty()) {
            System.out.print( queue.peek() + ", ");
            queue.remove();
        }
    }
    static void reverseq()
    {
        Stack<Integer> stack = new Stack<>();
        while (!queue.isEmpty()) {
            stack.add(queue.peek());
            queue.remove();
        }
        while (!stack.isEmpty()) {
            queue.add(stack.peek());
            stack.pop();
        }
    }
    public static void main(String[] args)
    {
        queue = new LinkedList<>();
        queue.add(10);
        queue.add(20);
        queue.add(30);
        queue.add(40);
        queue.add(50);
        reversequeue();
        Print();
    }
}

Q19. Program to reverse first k elements of a queue.
Ans: <Below is the code>
 
import java.util.LinkedList; 
import java.util.Queue; 
import java.util.Stack; 
public class Reverse_k_element_queue { 
	static Queue<Integer> queue; 
	static void reverseQueueFirstKElements(int k) 
	{ 
		if (queue.isEmpty() == true
			|| k > queue.size()) 
			return; 
		if (k <= 0) 
			return; 
		Stack<Integer> stack = new Stack<Integer>(); 
		for (int i = 0; i < k; i++) { 
			stack.push(queue.peek()); 
			queue.remove(); 
		} 
		while (!stack.empty()) { 
			queue.add(stack.peek()); 
			stack.pop(); 
		} 
		for (int i = 0; i < queue.size() - k; i++) { 
			queue.add(queue.peek()); 
			queue.remove(); 
		} 
	} 
	static void Print() 
	{ 
		while (!queue.isEmpty()) { 
			System.out.print(queue.peek() + " "); 
			queue.remove(); 
		} 
	} 
	public static void main(String args[]) 
	{ 
		queue = new LinkedList<Integer>(); 
		queue.add(10); 
		queue.add(20); 
		queue.add(30); 
		queue.add(40); 
		queue.add(50); 
		queue.add(60); 
		queue.add(70); 
		queue.add(80); 
		queue.add(90); 
		queue.add(100); 
		int k = 5; 
		reverseQueueFirstKElements(k); 
		Print(); 
	} 
} 

Q20. Program to return the nth node from the end in a linked list.
Ans: <Below is the code>
public class Test {
    Node head;
    class Node {
        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }
    void printNthFromLast(int n) {
        int len = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            len++;
        }
        if (len < n)
            return;
        temp = head;
        for (int i = 1; i < len - n + 1; i++)
            temp = temp.next;
        System.out.println(temp.data);
    }
    public void push(int new_data) {
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
    public static void main(String[] args) {
        Test lst = new Test();
        lst.push(32);
        lst.push(56);
        lst.push(11);
        lst.push(90);
        lst.printNthFromLast(4);
    }
}

Q21. Reverse a linked list
Ans: class LinkedList { 
    static Node head; 
    static class Node { 
        int data; 
        Node next; 
  
        Node(int d) { 
            data = d; 
            next = null; 
        } 
    } 
  
    Node reverse(Node node) { 
        Node prev = null; 
        Node current = node; 
        Node next = null; 
        while (current != null) { 
            next = current.next; 
            current.next = prev; 
            prev = current; 
            current = next; 
        } 
        node = prev; 
        return node; 
    }    
    void printList(Node node) { 
        while (node != null) { 
            System.out.print(node.data + " "); 
            node = node.next; 
        } 
    } 
    public static void main(String[] args) { 
        LinkedList list = new LinkedList(); 
        list.head = new Node(10); 
        list.head.next = new Node(43); 
        list.head.next.next = new Node(11); 
        list.head.next.next.next = new Node(12); 
        System.out.println(" Linked list"); 
        list.printList(head); 
        head = list.reverse(head); 
        System.out.println(""); 
        System.out.println("Reversed linked list "); 
        list.printList(head); 
    } 
} 

Q22. Replace each and every element of a array by its rank in the array?
Ans: <Below is the code>
class Main
{
	public static void transform(int[] arr)
	{
		Map<Integer, Integer> map = new TreeMap<>();
		for (int i = 0; i < arr.length; i++) {
			map.put(arr[i], i);
		}
		int rank = 1;
		for (var val : map.values()) {
			arr[val] = rank++;
		}
	}
	public static void main(String[] args)
	{
		int[] A = { 21, 43, 7, 1, 67, 18, 9 };
		transform(A);
		System.out.println(Arrays.toString(A));
	}
}

Q23. 23) Check if a given graph is a tree or not
Ans: <Below is the code>

import java.io.*; 
import java.util.*;  
class Graph 
{ 
   //vertices
    private int V; 
    private LinkedList<Integer> adj[];  
    Graph (int v) 
    { 
        V = v; 
        adj = new LinkedList[v]; 
        for (int i=0; i<v; ++i) 
            adj[i] = new LinkedList (); 
    } 
    // add an edge
    void addEdge(int v,int w) 
    { 
        adj[v].add(w); 
        adj[w].add(v); 
    } 
    Boolean isCyclicUtil(int v, Boolean visited[], int parent) 
    { 
        visited[v] = true; 
        Integer i; 
        Iterator<Integer> it = adj[v].iterator(); 
        while (it.hasNext()) 
        { 
            i = it.next();  
            if (!visited[i]) 
            { 
                if (isCyclicUtil(i, visited, v)) 
                    return true; 
            } 
            else if (i != parent) 
               return true; 
        } 
        return false; 
    } 
  
    // Returns true if the graph is a tree, else false. 
    Boolean isTree() 
    { 
        Boolean visited[] = new Boolean[V]; 
        for (int i = 0; i < V; i++) 
            visited[i] = false; 
        if (isCyclicUtil(0, visited, -1)) 
            return false; 
        for (int u = 0; u < V; u++) 
            if (!visited[u]) 
                return false; 
        return true; 
    } 
  
    // Driver code 
    public static void main(String args[]) 
    { 
        // Create a graph given in the above diagram 
        Graph g1 = new Graph(4); 
        g1.addEdge(0,1); 
        g1.addEdge(1, 2); 
        g1.addEdge(2, 3); 
        g1.addEdge(3, 4); 
        if (g1.isTree()) 
            System.out.println("Graph is Tree"); 
        else
            System.out.println("Graph is not Tree"); 
  
        Graph g2 = new Graph(5); 
        g2.addEdge(0,1); 
        g2.addEdge(1,2); 
        g2.addEdge(2,3); 
        g2.addEdge(3,4); 
        g2.addEdge(4,5 ); 
        if (g2.isTree()) 
            System.out.println("Graph is Tree"); 
        else
            System.out.println("Graph is not Tree"); 
    } 
}

Q24. Find out the Kth smallest element in an unsorted array
Ans: <Below is the code>

import java.util.Arrays;
    import java.util.Collections;
    class small {
    	public static int kthSmallest(Integer[] arr, int k)
    	{
        	Arrays.sort(arr);
        	return arr[k - 1];
    	}
    	public static void main(String[] args)
    	{
        	Integer arr[] = new Integer[] { 19, 2, 6, 17, 12 };
        	int k = 2;
        	System.out.print("K'th smallest element is " + kthSmallest(arr, k));
    	}
  }
  

Q25. How to find the shortest path between two vertices?
Ans: For finding the shortest path between two vertices these are the steps-
1. Firstly take nodes input of the graph 
2. Then get the input of the source and destination nodes.
3. Find the paths between the source and destination nodes.
4. Find the number of edges in all the paths and return the path having the minimum number of edges.
5. So through this the shortest path between the two vertices will be found.
